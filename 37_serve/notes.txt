installing from Ubuntu repositories:
- sudo apt update
- sudo apt install python3-pip python3-dev build-essential libssl-dev libffi-dev python3-setuptools
creating a venv:
- sudo apt install python3-venv
- mkdir ~/myproject
- cd ~/myproject
- python3.10 -m venv myprojectenv
- source myprojectenv/bin/activate
flask app:
- pip install wheel: a format for Python packages that makes it easier to install them
- pip install uwsgi flask: uwsgi serves web apps; it's the layer between Nginx and Flask
- nano ~/myproject/myproject.py
	- app.run(host='0.0.0.0'): listen on any ip address
- sudo ufw allow 5000: allow connections to port 5000
	- port: associated with a specific process; helps deal w/different types of data flow
- python myproject.py
WSGI:
- nano ~/myproject/wsgi.py: tells uWSGI how to interact with the app; import app and run it
- uwsgi --socket 0.0.0.0:5000 --protocol=http -w wsgi:app: testing app using uwsgi; socket = connection point; wsgi:app = entry point (name of module:name of callable)
- deactivate
- nano ~/myproject/myproject.ini: configuration file; lets you adjust settings
systemd:
- sudo nano /etc/systemd/system/myproject.service: lets Ubuntu automatically boot up uWSGI and serve the Flask app
- sudo chgrp www-data /home/claire: lets www-data users read files in home/claire
- sudo systemctl start myproject
- sudo systemctl enable myproject: lets it start at boot
- sudo systemctl status myproject: just to check the status
Passing requests to socket:
- sudo nano /etc/nginx/sites-available/myproject: configuration file
	- server_name _;
- sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled: linking file to directory (so you can access it without making a copy)
- sudo unlink /etc/nginx/sites-enabled/default: unlink default configuration file
- sudo nginx -t: test for errors
- sudo systemctl restart nginx: so that the new configuration is considered
- sudo ufw delete allow 5000
- sudo ufw allow 'Nginx Full'
